// contivModelClient.go
// This file is auto generated by modelgen tool
// Do not edit this file manually

package contivModel

import (
	"bytes"
	"encoding/json"
	"errors"
	"io/ioutil"
	"net/http"

	log "github.com/Sirupsen/logrus"
)

func httpGet(url string, jdata interface{}) error {

	r, err := http.Get(url)
	if err != nil {
		return err
	}
	defer r.Body.Close()

	switch {
	case r.StatusCode == int(404):
		return errors.New("Page not found!")
	case r.StatusCode == int(403):
		return errors.New("Access denied!")
	case r.StatusCode != int(200):
		log.Debugf("GET Status '%s' status code %d \n", r.Status, r.StatusCode)
		return errors.New(r.Status)
	}

	response, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := json.Unmarshal(response, jdata); err != nil {
		return err
	}

	return nil
}

func httpDelete(url string) error {

	req, err := http.NewRequest("DELETE", url, nil)

	r, err := http.DefaultClient.Do(req)
	if err != nil {
		panic(err)
	}
	defer r.Body.Close()

	// body, _ := ioutil.ReadAll(r.Body)

	switch {
	case r.StatusCode == int(404):
		// return errors.New("Page not found!")
		return nil
	case r.StatusCode == int(403):
		return errors.New("Access denied!")
	case r.StatusCode != int(200):
		log.Debugf("DELETE Status '%s' status code %d \n", r.Status, r.StatusCode)
		return errors.New(r.Status)
	}

	return nil
}

func httpPost(url string, jdata interface{}) error {
	buf, err := json.Marshal(jdata)
	if err != nil {
		return err
	}

	body := bytes.NewBuffer(buf)
	r, err := http.Post(url, "application/json", body)
	if err != nil {
		return err
	}
	defer r.Body.Close()

	switch {
	case r.StatusCode == int(404):
		return errors.New("Page not found!")
	case r.StatusCode == int(403):
		return errors.New("Access denied!")
	case r.StatusCode != int(200):
		log.Debugf("POST Status '%s' status code %d \n", r.Status, r.StatusCode)
		return errors.New(r.Status)
	}

	response, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}
	log.Debugf(string(response))

	return nil
}

// ContivClient has the contiv model client instance
type ContivClient struct {
	baseURL string
}

// NewContivClient returns a new client instance
func NewContivClient(baseURL string) (*ContivClient, error) {
	client := ContivClient{
		baseURL: baseURL,
	}

	return &client, nil
}

// PostApp posts the app object
func (c *ContivClient) PostApp(obj *App) error {
	// build key and URL
	keyStr := obj.TenantName + ":" + obj.AppName
	url := c.baseURL + "/api/apps/" + keyStr + "/"

	// http post the object
	err := httpPost(url, obj)
	if err != nil {
		log.Errorf("Error creating app %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// GetApp gets the app object
func (c *ContivClient) GetApp(tenantName string, appName string) (*App, error) {
	// build key and URL
	keyStr := tenantName + ":" + appName
	url := c.baseURL + "/api/apps/" + keyStr + "/"

	// http get the object
	var obj App
	err := httpGet(url, &obj)
	if err != nil {
		log.Errorf("Error getting app %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// DeleteApp deletes the app object
func (c *ContivClient) DeleteApp(tenantName string, appName string) error {
	// build key and URL
	keyStr := tenantName + ":" + appName
	url := c.baseURL + "/api/apps/" + keyStr + "/"

	// http get the object
	err := httpDelete(url)
	if err != nil {
		log.Errorf("Error deleting app %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// PostEndpointGroup posts the endpointGroup object
func (c *ContivClient) PostEndpointGroup(obj *EndpointGroup) error {
	// build key and URL
	keyStr := obj.TenantName + ":" + obj.NetworkName + ":" + obj.GroupName
	url := c.baseURL + "/api/endpointGroups/" + keyStr + "/"

	// http post the object
	err := httpPost(url, obj)
	if err != nil {
		log.Errorf("Error creating endpointGroup %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// GetEndpointGroup gets the endpointGroup object
func (c *ContivClient) GetEndpointGroup(tenantName string, networkName string, groupName string) (*EndpointGroup, error) {
	// build key and URL
	keyStr := tenantName + ":" + networkName + ":" + groupName
	url := c.baseURL + "/api/endpointGroups/" + keyStr + "/"

	// http get the object
	var obj EndpointGroup
	err := httpGet(url, &obj)
	if err != nil {
		log.Errorf("Error getting endpointGroup %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// DeleteEndpointGroup deletes the endpointGroup object
func (c *ContivClient) DeleteEndpointGroup(tenantName string, networkName string, groupName string) error {
	// build key and URL
	keyStr := tenantName + ":" + networkName + ":" + groupName
	url := c.baseURL + "/api/endpointGroups/" + keyStr + "/"

	// http get the object
	err := httpDelete(url)
	if err != nil {
		log.Errorf("Error deleting endpointGroup %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// PostGlobal posts the global object
func (c *ContivClient) PostGlobal(obj *Global) error {
	// build key and URL
	keyStr := obj.Name
	url := c.baseURL + "/api/globals/" + keyStr + "/"

	// http post the object
	err := httpPost(url, obj)
	if err != nil {
		log.Errorf("Error creating global %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// GetGlobal gets the global object
func (c *ContivClient) GetGlobal(name string) (*Global, error) {
	// build key and URL
	keyStr := name
	url := c.baseURL + "/api/globals/" + keyStr + "/"

	// http get the object
	var obj Global
	err := httpGet(url, &obj)
	if err != nil {
		log.Errorf("Error getting global %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// DeleteGlobal deletes the global object
func (c *ContivClient) DeleteGlobal(name string) error {
	// build key and URL
	keyStr := name
	url := c.baseURL + "/api/globals/" + keyStr + "/"

	// http get the object
	err := httpDelete(url)
	if err != nil {
		log.Errorf("Error deleting global %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// PostNetwork posts the network object
func (c *ContivClient) PostNetwork(obj *Network) error {
	// build key and URL
	keyStr := obj.TenantName + ":" + obj.NetworkName
	url := c.baseURL + "/api/networks/" + keyStr + "/"

	// http post the object
	err := httpPost(url, obj)
	if err != nil {
		log.Errorf("Error creating network %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// GetNetwork gets the network object
func (c *ContivClient) GetNetwork(tenantName string, networkName string) (*Network, error) {
	// build key and URL
	keyStr := tenantName + ":" + networkName
	url := c.baseURL + "/api/networks/" + keyStr + "/"

	// http get the object
	var obj Network
	err := httpGet(url, &obj)
	if err != nil {
		log.Errorf("Error getting network %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// DeleteNetwork deletes the network object
func (c *ContivClient) DeleteNetwork(tenantName string, networkName string) error {
	// build key and URL
	keyStr := tenantName + ":" + networkName
	url := c.baseURL + "/api/networks/" + keyStr + "/"

	// http get the object
	err := httpDelete(url)
	if err != nil {
		log.Errorf("Error deleting network %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// PostPolicy posts the policy object
func (c *ContivClient) PostPolicy(obj *Policy) error {
	// build key and URL
	keyStr := obj.TenantName + ":" + obj.PolicyName
	url := c.baseURL + "/api/policys/" + keyStr + "/"

	// http post the object
	err := httpPost(url, obj)
	if err != nil {
		log.Errorf("Error creating policy %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// GetPolicy gets the policy object
func (c *ContivClient) GetPolicy(tenantName string, policyName string) (*Policy, error) {
	// build key and URL
	keyStr := tenantName + ":" + policyName
	url := c.baseURL + "/api/policys/" + keyStr + "/"

	// http get the object
	var obj Policy
	err := httpGet(url, &obj)
	if err != nil {
		log.Errorf("Error getting policy %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// DeletePolicy deletes the policy object
func (c *ContivClient) DeletePolicy(tenantName string, policyName string) error {
	// build key and URL
	keyStr := tenantName + ":" + policyName
	url := c.baseURL + "/api/policys/" + keyStr + "/"

	// http get the object
	err := httpDelete(url)
	if err != nil {
		log.Errorf("Error deleting policy %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// PostRule posts the rule object
func (c *ContivClient) PostRule(obj *Rule) error {
	// build key and URL
	keyStr := obj.TenantName + ":" + obj.PolicyName + ":" + obj.RuleID
	url := c.baseURL + "/api/rules/" + keyStr + "/"

	// http post the object
	err := httpPost(url, obj)
	if err != nil {
		log.Errorf("Error creating rule %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// GetRule gets the rule object
func (c *ContivClient) GetRule(tenantName string, policyName string, ruleId string) (*Rule, error) {
	// build key and URL
	keyStr := tenantName + ":" + policyName + ":" + ruleId
	url := c.baseURL + "/api/rules/" + keyStr + "/"

	// http get the object
	var obj Rule
	err := httpGet(url, &obj)
	if err != nil {
		log.Errorf("Error getting rule %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// DeleteRule deletes the rule object
func (c *ContivClient) DeleteRule(tenantName string, policyName string, ruleId string) error {
	// build key and URL
	keyStr := tenantName + ":" + policyName + ":" + ruleId
	url := c.baseURL + "/api/rules/" + keyStr + "/"

	// http get the object
	err := httpDelete(url)
	if err != nil {
		log.Errorf("Error deleting rule %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// PostService posts the service object
func (c *ContivClient) PostService(obj *Service) error {
	// build key and URL
	keyStr := obj.TenantName + ":" + obj.AppName + ":" + obj.ServiceName
	url := c.baseURL + "/api/services/" + keyStr + "/"

	// http post the object
	err := httpPost(url, obj)
	if err != nil {
		log.Errorf("Error creating service %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// GetService gets the service object
func (c *ContivClient) GetService(tenantName string, appName string, serviceName string) (*Service, error) {
	// build key and URL
	keyStr := tenantName + ":" + appName + ":" + serviceName
	url := c.baseURL + "/api/services/" + keyStr + "/"

	// http get the object
	var obj Service
	err := httpGet(url, &obj)
	if err != nil {
		log.Errorf("Error getting service %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// DeleteService deletes the service object
func (c *ContivClient) DeleteService(tenantName string, appName string, serviceName string) error {
	// build key and URL
	keyStr := tenantName + ":" + appName + ":" + serviceName
	url := c.baseURL + "/api/services/" + keyStr + "/"

	// http get the object
	err := httpDelete(url)
	if err != nil {
		log.Errorf("Error deleting service %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// PostServiceInstance posts the serviceInstance object
func (c *ContivClient) PostServiceInstance(obj *ServiceInstance) error {
	// build key and URL
	keyStr := obj.TenantName + ":" + obj.AppName + ":" + obj.ServiceName + ":" + obj.InstanceID
	url := c.baseURL + "/api/serviceInstances/" + keyStr + "/"

	// http post the object
	err := httpPost(url, obj)
	if err != nil {
		log.Errorf("Error creating serviceInstance %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// GetServiceInstance gets the serviceInstance object
func (c *ContivClient) GetServiceInstance(tenantName string, appName string, serviceName string, instanceId string) (*ServiceInstance, error) {
	// build key and URL
	keyStr := tenantName + ":" + appName + ":" + serviceName + ":" + instanceId
	url := c.baseURL + "/api/serviceInstances/" + keyStr + "/"

	// http get the object
	var obj ServiceInstance
	err := httpGet(url, &obj)
	if err != nil {
		log.Errorf("Error getting serviceInstance %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// DeleteServiceInstance deletes the serviceInstance object
func (c *ContivClient) DeleteServiceInstance(tenantName string, appName string, serviceName string, instanceId string) error {
	// build key and URL
	keyStr := tenantName + ":" + appName + ":" + serviceName + ":" + instanceId
	url := c.baseURL + "/api/serviceInstances/" + keyStr + "/"

	// http get the object
	err := httpDelete(url)
	if err != nil {
		log.Errorf("Error deleting serviceInstance %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// PostTenant posts the tenant object
func (c *ContivClient) PostTenant(obj *Tenant) error {
	// build key and URL
	keyStr := obj.TenantName
	url := c.baseURL + "/api/tenants/" + keyStr + "/"

	// http post the object
	err := httpPost(url, obj)
	if err != nil {
		log.Errorf("Error creating tenant %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// GetTenant gets the tenant object
func (c *ContivClient) GetTenant(tenantName string) (*Tenant, error) {
	// build key and URL
	keyStr := tenantName
	url := c.baseURL + "/api/tenants/" + keyStr + "/"

	// http get the object
	var obj Tenant
	err := httpGet(url, &obj)
	if err != nil {
		log.Errorf("Error getting tenant %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// DeleteTenant deletes the tenant object
func (c *ContivClient) DeleteTenant(tenantName string) error {
	// build key and URL
	keyStr := tenantName
	url := c.baseURL + "/api/tenants/" + keyStr + "/"

	// http get the object
	err := httpDelete(url)
	if err != nil {
		log.Errorf("Error deleting tenant %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// PostVolume posts the volume object
func (c *ContivClient) PostVolume(obj *Volume) error {
	// build key and URL
	keyStr := obj.TenantName + ":" + obj.VolumeName
	url := c.baseURL + "/api/volumes/" + keyStr + "/"

	// http post the object
	err := httpPost(url, obj)
	if err != nil {
		log.Errorf("Error creating volume %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// GetVolume gets the volume object
func (c *ContivClient) GetVolume(tenantName string, volumeName string) (*Volume, error) {
	// build key and URL
	keyStr := tenantName + ":" + volumeName
	url := c.baseURL + "/api/volumes/" + keyStr + "/"

	// http get the object
	var obj Volume
	err := httpGet(url, &obj)
	if err != nil {
		log.Errorf("Error getting volume %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// DeleteVolume deletes the volume object
func (c *ContivClient) DeleteVolume(tenantName string, volumeName string) error {
	// build key and URL
	keyStr := tenantName + ":" + volumeName
	url := c.baseURL + "/api/volumes/" + keyStr + "/"

	// http get the object
	err := httpDelete(url)
	if err != nil {
		log.Errorf("Error deleting volume %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// PostVolumeProfile posts the volumeProfile object
func (c *ContivClient) PostVolumeProfile(obj *VolumeProfile) error {
	// build key and URL
	keyStr := obj.TenantName + ":" + obj.VolumeProfileName
	url := c.baseURL + "/api/volumeProfiles/" + keyStr + "/"

	// http post the object
	err := httpPost(url, obj)
	if err != nil {
		log.Errorf("Error creating volumeProfile %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// GetVolumeProfile gets the volumeProfile object
func (c *ContivClient) GetVolumeProfile(tenantName string, volumeProfileName string) (*VolumeProfile, error) {
	// build key and URL
	keyStr := tenantName + ":" + volumeProfileName
	url := c.baseURL + "/api/volumeProfiles/" + keyStr + "/"

	// http get the object
	var obj VolumeProfile
	err := httpGet(url, &obj)
	if err != nil {
		log.Errorf("Error getting volumeProfile %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// DeleteVolumeProfile deletes the volumeProfile object
func (c *ContivClient) DeleteVolumeProfile(tenantName string, volumeProfileName string) error {
	// build key and URL
	keyStr := tenantName + ":" + volumeProfileName
	url := c.baseURL + "/api/volumeProfiles/" + keyStr + "/"

	// http get the object
	err := httpDelete(url)
	if err != nil {
		log.Errorf("Error deleting volumeProfile %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}
